// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/chat_message.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	repository "chat-session/internal/repository"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMessage is a mock of Message interface.
type MockMessage struct {
	ctrl     *gomock.Controller
	recorder *MockMessageMockRecorder
}

// MockMessageMockRecorder is the mock recorder for MockMessage.
type MockMessageMockRecorder struct {
	mock *MockMessage
}

// NewMockMessage creates a new mock instance.
func NewMockMessage(ctrl *gomock.Controller) *MockMessage {
	mock := &MockMessage{ctrl: ctrl}
	mock.recorder = &MockMessageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessage) EXPECT() *MockMessageMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockMessage) Create(entity repository.MessageEntity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockMessageMockRecorder) Create(entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMessage)(nil).Create), entity)
}

// FindNewMsgByReceiverId mocks base method.
func (m *MockMessage) FindNewMsgByReceiverId(receiverId string) ([]repository.MessageEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindNewMsgByReceiverId", receiverId)
	ret0, _ := ret[0].([]repository.MessageEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindNewMsgByReceiverId indicates an expected call of FindNewMsgByReceiverId.
func (mr *MockMessageMockRecorder) FindNewMsgByReceiverId(receiverId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindNewMsgByReceiverId", reflect.TypeOf((*MockMessage)(nil).FindNewMsgByReceiverId), receiverId)
}

// UpdateIsRead mocks base method.
func (m *MockMessage) UpdateIsRead(ids []int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIsRead", ids)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateIsRead indicates an expected call of UpdateIsRead.
func (mr *MockMessageMockRecorder) UpdateIsRead(ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIsRead", reflect.TypeOf((*MockMessage)(nil).UpdateIsRead), ids)
}
